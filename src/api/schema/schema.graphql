type PositionModification {
    id: ID!
    timestamp: DateTime!
    stopLoss: Float
    takeProfit: Float
    leverage: Float
    size: Float
}

type PositionClose {
    id: ID!
    timestamp: DateTime!
    price: Float!
    pnl: Float!
    reason: String
}

type PositionMetrics {
    holdingTimeHours: Float!
    roi: Float!
    modifications: Int!
    finalLeverage: Float!
}

type Position {
    id: ID!
    symbol: String!
    direction: String!
    size: Float!
    leverage: Float!
    entryPrice: Float!
    timestamp: DateTime!
    metrics: PositionMetrics!
    modifications: [PositionModification!]!
    close: PositionClose
}

# Consolidate all queries into one Query type
type Query {
    # Position queries
    positionHistory(filters: PositionHistoryFilters): [Position!]!
    
    # Existing trade queries
    getTradeHistory: [Trade]
    getSignalAnalysis(payload: SignalPayloadInput!): SignalAnalysis
    getActiveTrades: [Trade!]!
    getTradingStats(
        timeframe: TimeFrame! = DAY
        from: DateTime
        to: DateTime
    ): TradingStats!
}

type Mutation {
    executeTrade(input: TradeInput!): TradeResult
}

type Trade {
    id: ID!
    strategy: String!
    entry: Float!
    exit: Float
    symbol: String!
    direction: String!
    price: Float!
    leverage: Int!
    takeProfit: Float!
    stopLoss: Float!
}

type SignalAnalysis {
    confirmation: String!
    leverage: Int!
    takeProfit: Float!
    stopLoss: Float!
}

input SignalPayloadInput {
    strategy: String!
    direction: String!
    price: Float!
    timeframe: String!
    symbol: String!
}

input TradeInput {
    symbol: String!
    direction: String!
    price: Float!
    leverage: Int!
    takeProfit: Float!
    stopLoss: Float!
}

type TradeResult {
    success: Boolean!
    message: String!
}

input PositionHistoryFilters {
    from: DateTime
    to: DateTime
    symbol: String
    strategy: String
    status: String
}
