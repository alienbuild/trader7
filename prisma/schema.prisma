generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Strategy {
  id              String   @id @default(uuid())
  name            String   @unique
  description     String
  timeframes      String[]
  entryConditions Json
  exitConditions  Json
  riskParameters  Json
  alerts          Json
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model TradeHistory {
  id         Int      @id @default(autoincrement())
  symbol     String
  strategy   String
  direction  String
  entryPrice Float
  exitPrice  Float?
  stopLoss   Float
  takeProfit Float
  tradeTime  DateTime @default(now())
  outcome    String?
  pnl        Float?
}

model LiquidityZone {
  id            Int      @id @default(autoincrement())
  symbol        String
  highLiquidity Float
  lowLiquidity  Float
  fakeoutCount  Int      @default(0)
  detectedAt    DateTime @default(now())
}

model MarketSession {
  id          String   @id @default(uuid())
  sessionName String   @unique
  openTime    Int
  closeTime   Int
  timeZone    String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Trade {
  id                String             @id @default(uuid())
  strategyName      String
  symbol            String
  direction         String
  entryPrice        Float
  stopLoss          Float
  takeProfit        Float
  quantity          Float
  status            String
  marketPhase       String
  sessionName       String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  patternDetections PatternDetection[]
  MarketCondition   MarketCondition[]
}

enum PatternType {
  LIQUIDITY_SWEEP
  VECTOR_CANDLE
  W_FORMATION
  M_FORMATION
}

model PatternDetection {
  id          String      @id @default(uuid())
  tradeId     String
  patternType PatternType
  confidence  Float
  timeframe   String
  price       Float
  volume      Float
  confirmed   Boolean
  createdAt   DateTime    @default(now())
  trade       Trade       @relation(fields: [tradeId], references: [id])
}

model MarketCondition {
  id              String   @id @default(uuid())
  tradeId         String
  adrExhaustion   Json
  psychLevels     Json
  marketStructure Json
  createdAt       DateTime @default(now())
  trade           Trade    @relation(fields: [tradeId], references: [id])
}

model MarketData {
  id        String   @id @default(uuid())
  symbol    String
  timeframe String
  open      Float
  high      Float
  low       Float
  close     Float
  volume    Float
  timestamp DateTime
  createdAt DateTime @default(now())

  @@index([timestamp])
}

model TradingSession {
  id        String  @id @default(uuid())
  name      String
  startTime String
  endTime   String
  isActive  Boolean @default(true)
}

model NewsEvent {
  id         String   @id @default(uuid())
  type       String // NEWS or ECONOMIC_EVENT
  title      String
  source     String
  symbol     String?
  impact     Float // 0 to 1
  timestamp  DateTime
  content    String
  sentiment  Float // -1 to 1
  importance Float // 0 to 1
  tags       String[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model TradingBlock {
  id        String   @id @default(uuid())
  startTime DateTime
  endTime   DateTime
  reason    String
  eventId   String?
  symbol    String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
}

enum EconomicEventType {
  FOMC
  NFP
  CPI
  GDP
  RETAIL_SALES
  PMI
  EARNINGS
}

model EconomicEvent {
  id         String            @id @default(uuid())
  type       EconomicEventType
  symbol     String? // Optional - some events affect all symbols
  title      String
  timestamp  DateTime
  importance Float // 0 to 1
  impact     Float? // Actual impact after event (-1 to 1)
  forecast   Float?
  previous   Float?
  actual     Float?
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
}

enum SessionType {
  PRE_MARKET
  REGULAR
  AFTER_HOURS
}

model NasdaqSession {
  id            String      @id @default(uuid())
  date          DateTime
  sessionType   SessionType
  openTime      DateTime
  closeTime     DateTime
  isHoliday     Boolean     @default(false)
  holidayName   String?
  isEarlyClose  Boolean     @default(false)
  tradingVolume Float?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@index([date])
}

enum MarketType {
  NASDAQ
  CRYPTO
}

enum IndicatorName {
  TICK
  ADD
  TRIN
  VIX
}

model MarketInternalThreshold {
  id             String        @id @default(uuid())
  marketType     MarketType
  indicatorName  IndicatorName
  longThreshold  Float
  shortThreshold Float
  isActive       Boolean       @default(true)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@unique([marketType, indicatorName])
}

model NasdaqMarketInternals {
  id        String   @id @default(uuid())
  timestamp DateTime @default(now())
  tick      Float
  add       Float
  trin      Float
  vix       Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([timestamp])
}

model PositionModification {
  id         Int      @id @default(autoincrement())
  positionId Int
  position   Position @relation(fields: [positionId], references: [id])
  stopLoss   Float?
  takeProfit Float?
  size       Float?
  leverage   Float?
  timestamp  DateTime @default(now())

  @@map("position_modifications")
}

model Position {
  id            Int                    @id @default(autoincrement())
  modifications PositionModification[]
  // ... other Position fields
}
