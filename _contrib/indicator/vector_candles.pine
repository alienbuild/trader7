// vector_candles.pine

// Vector Candle Zones Configuration
int zonesMax = input.int(500, 'Maximum zones to draw', group='Vector Candle Zones', inline="vczOn")
string zoneType = input.string(group='Vector Candle Zones', defval='Body only', title='Zone top/bottom is defined with: ', options=['Body only', 'Body with wicks'])
string zoneUpdateType = input.string(group='Vector Candle Zones', defval='Body with wicks', title='Zones are cleared using candle: ', options=['Body only', 'Body with wicks'])
int borderWidth = input.int(0, 'Zone border width', group='Vector Candle Zones')
bool colorOverride = input.bool(true, 'Override color?', group='Vector Candle Zones', inline="vcz1")
color zoneColor = input.color(title='Color', group='Vector Candle Zones', defval=color.rgb(255, 230, 75, 90), inline="vcz1", tooltip='The vector candle zones color to use if you do not want to use the PVSRA Candle Colors.')
int transperancy = input.int(90, 'Zone Transparency', minval=0, maxval=100, group='Vector Candle Zones', tooltip='If the vector candle zones color is not overridden, then we want to set the transparency of the vector candle colors as defined by the PBSRA candle colors. This setting only affects the candle zone colors, not the candle colors themselves.')

// Vector Candle Zones Logic
var zoneBoxesAbove = array.new_box()
var zoneBoxesBelow = array.new_box()

[pvsraVolume, pvsraHigh, pvsraLow, pvsraClose, pvsraOpen] = pvsraVolume(overrideSym, pvsraSym, syminfo.tickerid)

// Calculate PVSRA color and other metrics
[pvsraColor, alertFlag, averageVolume, volumeSpread, highestVolumeSpread] = trLib.calcPvsra(pvsraVolume, pvsraHigh, pvsraLow, pvsraClose, pvsraOpen, redVectorColor, greenVectorColor, violetVectorColor, blueVectorColor, regularCandleDownColor, regularCandleUpColor)
barcolor(pvsraColor)

if showVCZ

    // Get PVSRA flag
    pvsraFlag = trLib.getPvsraFlagByColor(pvsraColor, redVectorColor, greenVectorColor, violetVectorColor, blueVectorColor, regularCandleUpColor)

    // Update zones above and below the price
    trLib.updateZones(pvsraFlag, 0, zoneBoxesBelow, zonesMax, pvsraHigh, pvsraLow, pvsraOpen, pvsraClose, transperancy, zoneUpdateType, zoneColor, zoneType, borderWidth, colorOverride, redVectorColor, greenVectorColor, violetVectorColor, blueVectorColor)
    trLib.updateZones(pvsraFlag, 1, zoneBoxesAbove, zonesMax, pvsraHigh, pvsraLow, pvsraOpen, pvsraClose, transperancy, zoneUpdateType, zoneColor, zoneType, borderWidth, colorOverride, redVectorColor, greenVectorColor, violetVectorColor, blueVectorColor)

    // Clean up the arrays
    trLib.cleanarr(zoneBoxesAbove)
    trLib.cleanarr(zoneBoxesBelow)

// Detect High-Volume Vector Candles
is_green_vector = volume > ta.sma(volume, 14) * volume_multiplier and close > open
is_red_vector = volume > ta.sma(volume, 14) * volume_multiplier and close < open

// Detect Vector Candle Patterns
is_vector_long_setup = is_green_vector and close > ema_50
is_vector_short_setup = is_red_vector and close < ema_50