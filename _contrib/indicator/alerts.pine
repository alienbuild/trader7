// Inputs
webhookURL = input.string("https://your-api-endpoint.com/webhook", title="Webhook URL")
bars_to_include = input.int(50, title="Number of Historical Bars", minval=10, maxval=100)

// EMA Calculation
ema_50 = ta.ema(close, 50)
ema_200 = ta.ema(close, 200)
ema_800 = ta.ema(close, 800)

// ATR Calculation
atr = ta.atr(14)

// MACD Calculation
[macd_line, signal_line, macd_hist] = ta.macd(close, 12, 26, 9)

// RSI Calculation
rsi_value = ta.rsi(close, 14)

// Volume Spike Detection
avg_volume = ta.sma(volume, 14)
is_volume_spike = volume > avg_volume * 2

// W and M Formations
is_w_formation = low[2] > low[1] and low[1] < low and high[1] > high[2] and high > high[1] and close > close[1]
is_m_formation = high[2] < high[1] and high[1] > high and low[1] < low[2] and low < low[1] and close < close[1]

// Historical Data
var array<line> recent_candles = array.new_line()
if bar_index >= bars_to_include
    array.clear(recent_candles)
    for i = 0 to bars_to_include - 1
        recent_data = {
            "open": open[i],
            "high": high[i],
            "low": low[i],
            "close": close[i],
            "volume": volume[i]
        }
        array.push(recent_candles, recent_data)

// Determine Current Session
current_hour = hour(time)
market_session = current_hour >= 8 and current_hour < 16 ? "London" :
                 current_hour >= 16 and current_hour < 24 ? "New York" :
                 "Other"

// Payload Construction
construct_payload(_direction, _strategy) =>
    '{' +
    '"symbol": "' + syminfo.ticker + '", ' +
    '"timestamp": "' + str.tostring(time) + '", ' +
    '"timeframe": "' + timeframe.period + '", ' +
    // Vector analysis from TradingView
    '"vector": {' +
        '"type": "' + (is_climax_vector ? "climax" : is_trend_vector ? "trend" : "none") + '", ' +
        '"direction": "' + (close > open ? "up" : "down") + '", ' +
        '"isRecovered": ' + str.tostring(is_vector_recovered) + ', ' + // Changed from recovered to isRecovered
        '"quality": ' + str.tostring(vector_quality) + ', ' +
        '"momentum": ' + str.tostring(vector_momentum) + '' +
    '}, ' +
    // Recent candles data
    '"recentCandles": ' + get_recent_candles(10) + ', ' +
    // Market structure
    '"structure": {' +
        '"trend": "' + current_trend + '", ' +
        '"lastSwing": ' + str.tostring(last_swing) + ', ' +
        '"keyLevels": ' + get_key_levels() + '' +
    '}, ' +
    // Session info
    '"session": {' +
        '"current": "' + session.current + '", ' +
        '"isActive": ' + str.tostring(session.isActive) + ', ' +
        '"range": {' +
            '"high": ' + str.tostring(session_high) + ', ' +
            '"low": ' + str.tostring(session_low) + '' +
        '}' +
    '}, ' +
    // Technical indicators
    '"technicals": {' +
        '"ema_50": ' + str.tostring(threeEma) + ', ' +
        '"ema_200": ' + str.tostring(fourEma) + ', ' +
        '"ema_800": ' + str.tostring(fiveEma) + ', ' +  // Changed to ema_800
        '"rsi": ' + str.tostring(rsi_value) + ', ' +
        '"adr": ' + str.tostring(adr) + '' +
    '}, ' +
    '"volume": ' + str.tostring(volume) + '' +
    '}'


// Long Entry Alert
if is_w_formation and is_volume_spike and rsi_value < 70
    long_payload = construct_payload("long", "W Formation")
    alert(long_payload, alert.freq_once_per_bar)

// Short Entry Alert
if is_m_formation and is_volume_spike and rsi_value > 30
    short_payload = construct_payload("short", "M Formation")
    alert(short_payload, alert.freq_once_per_bar)

// Detect the first 15-minute candle closing above/below the Brinks Box range
brinks_high = request.security(syminfo.tickerid, "15", ta.highest(high, 4)) // Last 4 bars (1 hour)
brinks_low = request.security(syminfo.tickerid, "15", ta.lowest(low, 4)) // Last 4 bars (1 hour)

// Add volume confirmation
brinks_volume_confirmation = volume > ta.sma(volume, 20) * 1.5

// Add time-based filtering for London/NY session
is_valid_session = (hour >= 8 and hour < 16) or (hour >= 13 and hour < 21)

// Enhanced Brinks Box signals
brinks_long_signal = close > brinks_high and ta.crossover(close, brinks_high) and brinks_volume_confirmation and is_valid_session
brinks_short_signal = close < brinks_low and ta.crossunder(close, brinks_low) and brinks_volume_confirmation and is_valid_session

// Add momentum confirmation
brinks_momentum = ta.change(close, 3) / close[3] * 100
is_strong_momentum = math.abs(brinks_momentum) > 0.5

// Alert conditions
alertcondition(brinks_long_signal, title="Brinks Box Long Breakout", message="Brinks Box Long Breakout detected. First 15m candle closed above range.")
alertcondition(brinks_short_signal, title="Brinks Box Short Breakout", message="Brinks Box Short Breakout detected. First 15m candle closed below range.")

// Send payload when breakout is confirmed
if brinks_long_signal or brinks_short_signal
    alert_message = {
        "strategy": "Brinks Box",
        "direction": brinks_long_signal ? "long" : "short",
        "price": close,
        "timeframe": timeframe.period,
        "symbol": syminfo.tickerid,
        "session": session.ismarket ? "regular" : "extended",
        "market_structure": {
            "trend": ema_50 > ema_200 ? "bullish" : "bearish",
            "volatility": atr(14),
            "volume_confirmation": volume > volume[1] * volume_multiplier
        },
        "risk_metrics": {
            "atr": atr(14),
            "suggested_stop": brinks_long_signal ? brinks_low : brinks_high,
            "suggested_target": brinks_long_signal ? 
                close + ((close - brinks_low) * MIN_RISK_REWARD_RATIO_BRINKS) :
                close - ((brinks_high - close) * MIN_RISK_REWARD_RATIO_BRINKS)
        }
    }
    alert(alert_message, alert.freq_once_per_bar_close)

// Detect Liquidity Sweep (Fakeout)
liq_sweep_high = high > ta.highest(high, 10)[1] and close < high
liq_sweep_low = low < ta.lowest(low, 10)[1] and close > low

// Alert for liquidity sweeps
alertcondition(liq_sweep_high, title="Liquidity Sweep (High)", message="Possible fakeout above key level.")
alertcondition(liq_sweep_low, title="Liquidity Sweep (Low)", message="Possible fakeout below key level.")

// Define market cycle detection logic
is_level_1 = ta.lowest(low, 20) == low // New low (Level 1)
is_level_2 = ta.highest(high, 20) == high and close > ta.sma(close, 10) // Mid push (Level 2)
is_level_3 = ta.highest(high, 50) == high and close < ta.sma(close, 10) // Peak (Level 3)

// Generate cycle alerts
alertcondition(is_level_1, title="Market Cycle Level 1", message="Level 1 detected. Reversal possible.")
alertcondition(is_level_2, title="Market Cycle Level 2", message="Level 2 detected. Trend continuation.")
alertcondition(is_level_3, title="Market Cycle Level 3", message="Level 3 detected. Caution for reversal.")
