// Inputs
webhookURL = input.string("https://your-api-endpoint.com/webhook", title="Webhook URL")
bars_to_include = input.int(50, title="Number of Historical Bars", minval=10, maxval=100)

// EMA Calculation
ema_50 = ta.ema(close, 50)
ema_200 = ta.ema(close, 200)
ema_800 = ta.ema(close, 800)

// ATR Calculation
atr = ta.atr(14)

// MACD Calculation
[macd_line, signal_line, macd_hist] = ta.macd(close, 12, 26, 9)

// RSI Calculation
rsi_value = ta.rsi(close, 14)

// Volume Spike Detection
avg_volume = ta.sma(volume, 14)
is_volume_spike = volume > avg_volume * 2

// W and M Formations
is_w_formation = low[2] > low[1] and low[1] < low and high[1] > high[2] and high > high[1] and close > close[1]
is_m_formation = high[2] < high[1] and high[1] > high and low[1] < low[2] and low < low[1] and close < close[1]

// Historical Data
var array<line> recent_candles = array.new_line()
if bar_index >= bars_to_include
    array.clear(recent_candles)
    for i = 0 to bars_to_include - 1
        recent_data = {
            "open": open[i],
            "high": high[i],
            "low": low[i],
            "close": close[i],
            "volume": volume[i]
        }
        array.push(recent_candles, recent_data)

// Determine Current Session
current_hour = hour(time)
market_session = current_hour >= 8 and current_hour < 16 ? "London" :
                 current_hour >= 16 and current_hour < 24 ? "New York" :
                 "Other"

// Payload Construction
construct_payload(_direction, _strategy) =>
    '{' +
    '"symbol": "' + syminfo.ticker + '", ' +
    '"timestamp": "' + str.tostring(time) + '", ' +
    '"price": ' + str.tostring(close) + ', ' +
    '"direction": "' + _direction + '", ' +
    '"strategy": "' + _strategy + '", ' +
    '"timeframe": "' + timeframe.period + '", ' +
    '"ema_50": ' + str.tostring(ema_50) + ', ' +
    '"ema_200": ' + str.tostring(ema_200) + ', ' +
    '"ema_800": ' + str.tostring(ema_800) + ', ' +
    '"atr": ' + str.tostring(atr) + ', ' +
    '"macd": {"line": ' + str.tostring(macd_line) + ', "signal": ' + str.tostring(signal_line) + ', "histogram": ' + str.tostring(macd_hist) + '}, ' +
    '"rsi": ' + str.tostring(rsi_value) + ', ' +
    '"volume": ' + str.tostring(volume) + ', ' +
    '"session": "' + market_session + '", ' +
    '"recent_candles": ' + str.tostring(array.slice(recent_candles, 0, array.size(recent_candles))) + ' ' +
    '}'

// Long Entry Alert
if is_w_formation and is_volume_spike and rsi_value < 70
    long_payload = construct_payload("long", "W Formation")
    alert(long_payload, alert.freq_once_per_bar)

// Short Entry Alert
if is_m_formation and is_volume_spike and rsi_value > 30
    short_payload = construct_payload("short", "M Formation")
    alert(short_payload, alert.freq_once_per_bar)
